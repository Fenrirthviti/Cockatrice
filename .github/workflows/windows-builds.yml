name: 'Build on Windows'

on:
  push:
    branches:
      - master
      - vcpkg-updates
    paths-ignore:
      - '**.md'
    tags:
      - '*'
  pull_request:
    branches:
      - master
    paths-ignore:
      - '**.md'

jobs:
  windows-builds:
    name: 'Windows ${{ matrix.arch }}-bit'
    runs-on: ${{ matrix.os }}
    env:
      QT_VERSION: '5.12.9'
      CMAKE_GENERATOR: "Visual Studio 16 2019"
    strategy:
      fail-fast: false
      matrix:
        target: [windows64, windows32]
        include:
          - target: windows64
            os: windows-latest
            arch: '64'
            qt-arch: 'win64_msvc2017_64'
            qtdir: '\Qt64\Qt\5.12.9\msvc2017_64'
            cmake-arch: 'x64'

          - target: windows32
            os: windows-latest
            arch: '32'
            qt-arch: 'win32_msvc2017'
            qtdir: '\Qt32\Qt\5.12.9\msvc2017'
            cmake-arch: 'Win32'

    steps:
      - name: 'Add msbuild to PATH'
        uses: microsoft/setup-msbuild@v1.0.2

      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: 'Get Cockatrice git info'
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          git fetch --prune --unshallow
          echo "GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: 'Restore Qt ${{ matrix.arch }}-bit from cache'
        uses: actions/cache@v2
        with:
          path: |
            ${{ runner.workspace }}/Qt${{ matrix.arch }}
          key: ${{ runner.os }}-QtCache-${{ matrix.arch }}bit

      - name: 'Install ${{ matrix.arch }}-bit Qt'
        uses: jurplel/install-qt-action@v2
        with:
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          version: '${{ env.QT_VERSION }}'
          arch: ${{ matrix.qt-arch }}
          dir: ${{ runner.workspace }}/Qt${{ matrix.arch }}

      - name: 'Restore vcpkg ${{ matrix.arch }}-bit from cache'
        uses: actions/cache@v2
        with:
          path: |
            ${{ github.workspace }}/build${{ matrix.arch }}/vcpkg_installed
          key: ${{ runner.os }}-vcpkgCache-${{ matrix.arch }}bit

      - name: 'Configure Cockatrice ${{ matrix.arch }}-bit'
        working-directory: ${{ github.workspace }}
        run: |
          New-Item build${{ matrix.arch }} -type directory -force
          cd build${{ matrix.arch }}
          cmake .. -G "${{ env.CMAKE_GENERATOR }}" -A "${{ matrix.cmake-arch }}" -DQTDIR="${{ runner.workspace }}${{ matrix.qtdir }}" -DCMAKE_BUILD_TYPE="Release" -DWITH_SERVER=1 -DTEST=t

      - name: 'Build Cockatrice ${{ matrix.arch }}-bit'
        working-directory: ${{ github.workspace }}
        run: msbuild /m /p:Configuration=Release .\build${{ matrix.arch }}\Cockatrice.sln

      - name: 'Build Cockatrice Installer Package ${{ matrix.arch }}-bit'
        working-directory: ${{ github.workspace }}
        run: |
          cd build${{ matrix.arch }}
          msbuild /m /p:Configuration=Release PACKAGE.vcxproj
          cp *.exe ../Cockatrice-${{ env.GIT_TAG }}-${{ env.GIT_HASH }}-${{ matrix.arch }}bit-installer.exe

      - name: 'Run Tests'
        working-directory: ${{ github.workspace }}/build${{ matrix.arch }}
        run: ctest -T Test -C Release

      - name: 'Publish'
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: 'Cockatrice-${{ env.GIT_TAG }}-${{ matrix.arch }}bit'
          path: './*.exe'

  make-release:
    name: 'Create and upload release'
    runs-on: [ubuntu-latest]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs: [windows-builds]

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: 'Fetch git tags'
        shell: bash
        run: |
          git fetch --prune --unshallow
          echo "GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: 'Checking if beta'
        if: contains(env.GIT_TAG, 'beta')
        shell: bash
        run: |
          echo 'IS_BETA=true' >> $GITHUB_ENV

      - name: 'Checking if beta'
        if: "!contains(env.GIT_TAG, 'beta')"
        shell: bash
        run: |
          echo 'IS_BETA=false' >> $GITHUB_ENV

      - name: 'Create Release'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.GIT_TAG }}
          release_name: Cockatrice ${{ env.GIT_TAG }}
          draft: true
          prerelease: ${{ env.IS_BETA }}

      - name: 'Generate filenames'
        shell: bash
        run: |
          FILE_NAME=Cockatrice-${{ env.GIT_TAG }}-${{ env.GIT_HASH }}
          echo "FILE_NAME=${FILE_NAME}" >> $GITHUB_ENV

      - name: 'Download artifacts'
        uses: actions/download-artifact@v2
        with:
          path: ./

      - name: 'Upload 32bit to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Cockatrice-${{ env.GIT_TAG }}-32bit/${{ env.FILE_NAME }}-32bit-installer.exe
          asset_name: Cockatrice-${{ env.GIT_TAG }}-32bit-installer.exe
          asset_content_type: application/octet-stream

      - name: 'Upload 64bit to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Cockatrice-${{ env.GIT_TAG }}-64bit/${{ env.FILE_NAME }}-64bit-installer.exe
          asset_name: Cockatrice-${{ env.GIT_TAG }}-64bit-installer.exe
          asset_content_type: application/octet-stream

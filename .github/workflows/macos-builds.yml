name: Build on macOS

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - master
    paths-ignore:
      - '**.md'
  release:
    types:
      - published

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        target:
          - Debug
          - 10.11_El_Capitan
          - 10.14_Mojave
          - 10.15_Catalina
          - 11.0_Big_Sur
        include:
          - target: Debug # tests only
            os: macos-latest
            xcode: 11.7
            type: Debug
            do_tests: 0 # tests do not work yet on mac
            make_package: false

          - target: 10.11_El_Capitan
            os: macos-10.13 # runs on HighSierra
            allow-failure: yes # we don't know if it'll be added
            xcode: 8.2.1 # should be compatible with macos 10.11.5
            type: Release
            do_tests: 0
            make_package: true

          - target: 10.14_Mojave
            os: macos-10.15 # runs on Catalina
            xcode: 10.3 # should be compatible with macos 10.14.3
            type: Release
            do_tests: 0
            make_package: true

          - target: 10.15_Catalina
            os: macos-10.15
            xcode: 11.7
            type: Release
            do_tests: 0
            make_package: true

          - target: 11.0_Big_Sur
            os: macos-11.0
            xcode: 12.2
            type: Release
            do_tests: 0
            make_package: true

    runs-on: ${{matrix.os}}

    continue-on-error: ${{matrix.allow-failure == 'yes'}}

    env:
      CCACHE_DIR: ~/.ccache
      DEVELOPER_DIR:
        /Applications/Xcode_${{matrix.xcode}}.app/Contents/Developer

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies using homebrew
        shell: bash
        # cmake cannot find the mysql connector
        # neither of these works: mariadb-connector-c mysql-connector-c++
        run: brew install ccache protobuf

      - name: Install QT using homebrew
        id: brew_install_qt
        continue-on-error: true
        shell: bash
        run: brew install qt --force-bottle

      - name: Install QT using actions
        if: steps.brew_install_qt.outcome != 'success'
        uses: jurplel/install-qt-action@v2

      - name: Get ccache timestamp
        id: ccache_timestamp
        shell: bash
        run: echo "::set-output name=timestamp::$(date -u '+%Y%m%d%H%M%S')"

      - name: Restore ccache cache
        uses: actions/cache@v2
        env:
          timestamp: ${{steps.ccache_timestamp.outputs.timestamp}}
        with:
          path: ${{env.CCACHE_DIR}}
          key: ${{runner.os}}-xcode-${{matrix.xcode}}-ccache-${{env.timestamp}}
          restore-keys: |
            ${{runner.os}}-xcode-${{matrix.xcode}}-ccache-

      - name: Build on Xcode ${{matrix.xcode}}
        shell: bash
        run: .ci/compile.sh ${{matrix.type}} --server

      - name: Test
        if: matrix.do_tests == 1
        shell: bash
        working-directory: build
        run: cmake --build . --target test

      - name: Package for ${{matrix.target}}
        if: matrix.make_package
        shell: bash
        working-directory: build
        run: |
          # temporary workaround for big sur images having old cmake
          if [[ ${{matrix.os}} == macos-11.0 ]]; then
            curl -L https://github.com/Kitware/CMake/releases/download/v3.19.0/cmake-3.19.0-Darwin-x86_64.tar.gz | tar -xz
            ./cmake-3.19.0-Darwin-x86_64/CMake.app/Contents/bin/cpack --config ./CPackConfig.cmake
          else
            cmake --build . --target package
          fi

      - name: Rename output file and get upload URL
        if: matrix.make_package
        id: name
        shell: bash
        run: ./.ci/name_build.sh "-macOS-${{matrix.target}}"

      - name: Upload artifacts
        if: matrix.make_package
        uses: actions/upload-artifact@v2
        with:
          name: macOS-${{matrix.target}}-xcode-${{matrix.xcode}}-dmg
          path: ${{steps.name.outputs.file}}

      - name: Upload release ${{steps.name.outputs.name}}
        if: steps.name.outputs.upload_url != null
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.name.outputs.upload_url}}
          asset_path: ${{steps.name.outputs.file}}
          asset_name: ${{steps.name.outputs.name}}
          asset_content_type: binary_package # required but arbitrary
